By Anonymous

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////Data preparation/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import pandas as pd
import numpy as np
df =pd.read_csv ('Heart.csv')
df

# find shape of data
df.shape

#finding datatypes of each column
df.dtypes

# Find Mean age of patients
df['Age'].mean

#Now extract only Age, Sex, ChestPain, RestBP, Chol. Randomly divide dataset in training (75%) and testing (25%).


gene=df[['Age', 'Sex', 'ChestPain', 'RestBP', 'Chol']]
from sklearn.model_selection import train_test_split
train,test=train_test_split(gene,test_size=0.25,random_state=10)
train


test

train

test

# Finding out Zero's
(df == 0).sum().sum()


(df['Sex']==0).sum()

(df =='typical').sum()

df.isnull()

#Find Missing Values
df.isnull().sum()

(df['Age']==0).sum

(df==0).sum()

(df==0).sum().sum()

# part 2 confusion matrix

TP=45
FP=55
FN=5
TN=395
Total=500

recall=TP/(TP+FN)
print("Recall :",recall)

accuracy=(TP+TN)/Total
print("Accuracy: ",accuracy)


F1=2*(precision*recall)/(precision+recall)
print("F1_score: ",F1)







//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Regression technique////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import pandas as pd
import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt

df = pd.read_csv("temperatures.csv")
df.head()

df.columns

import seaborn as sns
%matplotlib inline
plt.xlabel("YEAR")
plt.ylabel("JAN")
plt.scatter(df.YEAR,df.JAN,color = 'red',marker = '^')
new_df = df
new_df.drop(df.iloc[:,2:18],inplace = True,axis = 1)
new_df
JanTemp = df.JAN
JanTemp

year = df.YEAR
year

new_df = new_df.drop("JAN",axis = 'columns')
new_df

import numpy as np
import matplotlib.pyplot as plt
from operator import mul
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import metrics

x = df.iloc[:,0:1].values
y = df.iloc[:,1].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1/3, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train,y_train)

y_pred = regressor.predict(x_test)

df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
df

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) 
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) 
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

from sklearn.metrics import mean_absolute_error
print("MAE",mean_absolute_error(y_test,y_pred))

from sklearn.metrics import mean_squared_error
print("MSE",mean_squared_error(y_test,y_pred))

from sklearn.metrics import r2_score
print("r2_score",r2_score(y_test,y_pred))

plt.xlabel("YEAR")
plt.ylabel("JAN")
plt.plot(x_train,regressor.predict(x_train),color="blue")
plt.draw()

plt.xlabel("YEAR")
plt.ylabel("JAN")
plt.plot(x_train,regressor.predict(x_train),color="maroon")
plt.draw()









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Clustring Techniques////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


dataset = pd.read_csv('Mall_Customers.csv')
X = dataset.iloc[:, [3, 4]].values


import scipy.cluster.hierarchy as sch
dendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distances')
plt.show()

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage = 'ward')
y_hc = hc.fit_predict(X)
y_hc

plt.scatter(X[y_hc == 0, 0], X[y_hc == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Association Rule Learning///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////










import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
data = pd.read_csv('Market_Basket_Optimisation.csv',header=None)
data

data.values.tolist()


T = []
for i in range(len(data)):
    T.append([ str(data.values[i,j]) for j in range(0,20) if str(data.values[i,j])!='nan' ])
    
    
   T
   
   
   !pip install apyori
from apyori import apriori
rules = apriori(T,min_support=0.003,min_confidence=0.35,min_lift=3,min_length=2)
   
   list(rules)
   
   
   D = data.values.ravel()
D



import collections
val = collections.Counter(D)
val


val.items()



df = pd.DataFrame(val.items())
df


df = df.rename(columns={0:'items',1:'Total'})
df


df.sort_values(by='Total',ascending=False)[1:]










//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////Improving Performance of Classifier Models////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





import pandas as pd
import numpy as np

df=pd.read_csv('spam.csv',encoding='latin1')
df.head()

df=df.rename(columns={'v1':'label','v2':'text'})
df.head()

print("number of rows: ",len(df))

df.label.value_counts()

df.describe()

df.loc[:,'label']=df.label.map({'ham':0,'spam':1})

df.head()

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split

count=CountVectorizer()

text=count.fit_transform(df['text'])

x_train,x_test,y_train,y_test=train_test_split(text,df['label'],test_size=0.20,random_state=1)

print(x_train.shape)


print(x_test.shape)


from sklearn.naive_bayes import BernoulliNB

model=BernoulliNB()
model.fit(x_train,y_train)
prediction=model.predict(x_test)
print(prediction)


from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score

print(BernoulliNB)


print("acccuracy_score:{}".format(accuracy_score(y_test,prediction)))


print("precision_score:{}".format(precision_score(y_test,prediction)))

print("precision_score:{}".format(precision_score(y_test,prediction)))

print("f1_score:{}".format(f1_score(y_test,prediction)))


from sklearn.naive_bayes import MultinomialNB
model=MultinomialNB()
model.fit(x_train,y_train)


prediction=model.predict(x_test)
print(prediction)


from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score


print(MultinomialNB)


print("acccuracy_score:{}".format(accuracy_score(y_test,prediction)))

print("precision_score:{}".format(precision_score(y_test,prediction)))

print("recall_score:{}".format(recall_score(y_test,prediction)))

print("f1_score:{}".format(f1_score(y_test,prediction)))
